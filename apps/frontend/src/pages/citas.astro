---
import LayoutLogin from "../layouts/LayoutLogin.astro";
---

<LayoutLogin>
    <div class="container">
        <aside class="sidebar">
            <nav>
                <ul>
                    <li><a href="/admin">Horarios</a></li>
                    <li><a href="/inventario">Inventario</a></li>
                    <li><a href="/citas">Citas</a></li>
                </ul>
            </nav>
        </aside>

        <div class="container-2">
            <h1>Gestor de Citas</h1>
            <div id="connectionStatus" class="connection-status">
                <span class="status-dot"></span>
                <span class="status-text">Conectando...</span>
            </div>
            
            <!-- Filtros y b√∫squeda -->
            <div class="filters-container">
                <input type="text" id="searchInput" placeholder="Buscar por nombre o tel√©fono..." class="search-input">
                <select id="statusFilter" class="filter-select">
                    <option value="all">Todos los estados</option>
                    <option value="pending">Pendiente</option>
                    <option value="confirmed">Confirmado</option>
                    <option value="cancelled">Cancelado</option>
                </select>
                <button id="btnRefresh" class="btn btn-secondary">Actualizar</button>
            </div>
            
            <table class="table-excel" id="tablaCitas">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre Cliente</th>
                        <th>Tel√©fono</th>
                        <th>Fecha y Hora</th>
                        <th>Servicio</th>
                        <th>Precio</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="citasBody">
                    <!-- Las citas se cargar√°n din√°micamente -->
                </tbody>
            </table>
            <button id="btnAgregar" class="btn btn-primary">Agregar Nueva Cita</button>
        </div>
    </div>

      <!-- Cargar socket.io-client desde CDN -->
    <script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>

    <script>
        // Configuraci√≥n
        const BOT_SERVER_URL = 'https://proyecto-bot-gbbo.onrender.com';
        const FRONTEND_URL = 'https://pagina-render-wtbx.onrender.com';
        
        console.log('üöÄ Iniciando frontend de citas');
        console.log('üåç Frontend URL:', FRONTEND_URL);
        console.log('üîó Bot Server URL:', BOT_SERVER_URL);
        
        let socket = null;
        let connectionStatus = document.getElementById('connectionStatus');
        let statusDot = connectionStatus.querySelector('.status-dot');
        let statusText = connectionStatus.querySelector('.status-text');
        let serverUrlSpan = document.getElementById('serverUrl');
        let connectionState = document.getElementById('connectionState');
        let connectionInfo = document.getElementById('connectionInfo');
        
        // Mostrar informaci√≥n de conexi√≥n
        serverUrlSpan.textContent = BOT_SERVER_URL;
        
        // Almacenamiento de todas las citas
        let allAppointments = [];
        
        // Funci√≥n para verificar la conexi√≥n al servidor
        async function checkServerConnection() {
            try {
                connectionState.textContent = 'Estado: Verificando servidor...';
                console.log('üîç Verificando conexi√≥n con el servidor...');
                
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000);
                
                const response = await fetch(`${BOT_SERVER_URL}/health`, {
                    method: 'GET',
                    mode: 'cors',
                    signal: controller.signal,
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                clearTimeout(timeoutId);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('‚úÖ Servidor disponible:', data);
                    connectionState.textContent = 'Estado: Servidor disponible ‚úÖ';
                    return true;
                } else {
                    console.warn('‚ö†Ô∏è  Servidor respondi√≥ con error:', response.status);
                    connectionState.textContent = `Estado: Error del servidor (${response.status}) ‚ö†Ô∏è`;
                    return false;
                }
            } catch (error) {
                if (error.name === 'AbortError') {
                    console.error('‚ùå Timeout al conectar con el servidor');
                    connectionState.textContent = 'Estado: Timeout del servidor ‚ùå';
                } else {
                    console.error('‚ùå Error al conectar con el servidor:', error.message);
                    connectionState.textContent = 'Estado: Error de conexi√≥n ‚ùå';
                }
                return false;
            }
        }

        // Cargar citas desde localStorage al iniciar
        function loadAppointmentsFromStorage() {
            try {
                const storedAppointments = localStorage.getItem('appointments');
                if (storedAppointments) {
                    allAppointments = JSON.parse(storedAppointments);
                    console.log(`üìã Cargadas ${allAppointments.length} citas desde almacenamiento local`);
                    renderAppointments(allAppointments);
                } else {
                    console.log('üìã No hay citas en almacenamiento local');
                    renderAppointments([]);
                }
            } catch (error) {
                console.error('Error al cargar citas desde almacenamiento:', error);
                renderAppointments([]);
            }
        }
        
        // Funci√≥n para cargar citas desde el servidor via HTTP
        async function loadAppointmentsFromServer() {
            try {
                console.log('üì° Intentando cargar citas desde el servidor...');
                connectionState.textContent = 'Estado: Cargando citas...';
                
                // Primero verificar si el servidor est√° disponible
                const isServerAvailable = await checkServerConnection();
                
                if (!isServerAvailable) {
                    console.log('‚ö†Ô∏è  Servidor no disponible, usando datos locales');
                    loadAppointmentsFromStorage();
                    updateConnectionStatus(false, 'Servidor no disponible - Modo local');
                    return;
                }
                
                // Intentar cargar citas via HTTP
                try {
                    console.log('üåê Solicitando citas via HTTP...');
                    const response = await fetch(`${BOT_SERVER_URL}/api/appointments`, {
                        method: 'GET',
                        mode: 'cors',
                        headers: {
                            'Accept': 'application/json'
                        }
                    });
                    
                    if (response.ok) {
                        const appointments = await response.json();
                        allAppointments = appointments;
                        renderAppointments(allAppointments);
                        localStorage.setItem('appointments', JSON.stringify(appointments));
                        console.log('‚úÖ Citas cargadas desde servidor HTTP:', appointments.length);
                        connectionState.textContent = 'Estado: Datos cargados ‚úÖ';
                        updateConnectionStatus(true, 'Datos cargados via HTTP');
                    } else {
                        throw new Error(`HTTP error: ${response.status}`);
                    }
                } catch (httpError) {
                    console.log('‚ö†Ô∏è  Error HTTP, usando datos locales:', httpError.message);
                    loadAppointmentsFromStorage();
                    connectionState.textContent = 'Estado: Error HTTP - Modo local ‚ö†Ô∏è';
                    updateConnectionStatus(false, 'Error HTTP - Modo local');
                }
                
            } catch (error) {
                console.error('‚ùå Error al cargar citas del servidor:', error);
                loadAppointmentsFromStorage();
                connectionState.textContent = 'Estado: Error de conexi√≥n - Modo local ‚ùå';
                updateConnectionStatus(false, 'Error de conexi√≥n - Modo local');
            }
        }

        // Funci√≥n para actualizar el estado de conexi√≥n
        function updateConnectionStatus(connected, message) {
            if (connected) {
                statusDot.classList.add('connected');
                statusDot.style.backgroundColor = '#28a745';
                connectionInfo.style.border = '2px solid #28a745';
            } else {
                statusDot.classList.remove('connected');
                statusDot.style.backgroundColor = '#dc3545';
                connectionInfo.style.border = '2px solid #dc3545';
            }
            statusText.textContent = message;
        }

        // Funci√≥n para renderizar citas
        function renderAppointments(appointments) {
            const tbody = document.getElementById('citasBody');
            tbody.innerHTML = '';
            
            if (appointments.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" style="text-align: center; padding: 20px; color: #666;">No hay citas registradas</td></tr>';
                return;
            }
            
            appointments.forEach(appointment => {
                const row = document.createElement('tr');
                const isConfirmed = appointment.status === 'confirmed';
                const isCancelled = appointment.status === 'cancelled';
                
                row.innerHTML = `
                    <td>${appointment.id || 'N/A'}</td>
                    <td>${appointment.patient_name || appointment.nombre || 'N/A'}</td>
                    <td>${appointment.patient_phone || appointment.telefono || 'N/A'}</td>
                    <td>${appointment.appointment_date || appointment.fecha || 'N/A'}</td>
                    <td>${appointment.service_type || appointment.servicio || 'N/A'}</td>
                    <td>${appointment.service_price || appointment.precio || 'N/A'}</td>
                    <td>
                        <span class="status-badge ${appointment.status || 'pending'}">
                            ${isConfirmed ? 'Confirmado' : isCancelled ? 'Cancelado' : 'Pendiente'}
                        </span>
                    </td>
                    <td class="actions-cell">
                        ${!isConfirmed && !isCancelled ? 
                            `<button class="btn btn-success btn-sm confirm-btn" data-id="${appointment.id}">Confirmar</button>` : ''}
                        ${isConfirmed || isCancelled ? 
                            `<span class="no-actions">No hay acciones</span>` : ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            addButtonListeners();
        }

        // Funci√≥n para conectar WebSocket (solo si el servidor est√° disponible)
        async function connectWebSocket() {
            // Primero verificar si el servidor est√° disponible
            const isServerAvailable = await checkServerConnection();
            
            if (!isServerAvailable) {
                console.log('‚ö†Ô∏è  Servidor no disponible, omitiendo WebSocket');
                updateConnectionStatus(false, 'Servidor no disponible - Modo HTTP');
                return;
            }
            
            try {
                if (typeof io === 'undefined') {
                    throw new Error('Socket.io no cargado');
                }
                
                console.log('üîó Intentando conexi√≥n WebSocket...');
                connectionState.textContent = 'Estado: Conectando WebSocket...';
                
                // Cerrar conexi√≥n existente
                if (socket) {
                    socket.disconnect();
                    socket = null;
                }
                
                socket = io(BOT_SERVER_URL, {
                    transports: ['websocket', 'polling'],
                    timeout: 8000,
                    reconnection: false, // Desactivar reconexi√≥n autom√°tica
                    forceNew: true
                });
                
                socket.on('connect', () => {
                    console.log('‚úÖ WebSocket conectado');
                    connectionState.textContent = 'Estado: WebSocket conectado ‚úÖ';
                    updateConnectionStatus(true, 'Conectado en tiempo real');
                });
                
                socket.on('disconnect', (reason) => {
                    console.log('‚ùå WebSocket desconectado:', reason);
                    connectionState.textContent = `Estado: WebSocket desconectado ‚ùå`;
                    updateConnectionStatus(false, `Desconectado: ${reason}`);
                });
                
                socket.on('connect_error', (error) => {
                    console.error('‚ùå Error de conexi√≥n WebSocket:', error.message);
                    connectionState.textContent = 'Estado: Error WebSocket ‚ùå';
                    updateConnectionStatus(false, 'Error de conexi√≥n WebSocket');
                });
                
                // Timeout para conexi√≥n WebSocket
                setTimeout(() => {
                    if (!socket || !socket.connected) {
                        console.log('‚è∞ Timeout de conexi√≥n WebSocket');
                        if (socket) socket.disconnect();
                        connectionState.textContent = 'Estado: Timeout WebSocket ‚è∞';
                        updateConnectionStatus(false, 'Timeout de conexi√≥n');
                    }
                }, 10000);
                
            } catch (error) {
                console.error('‚ùå Error al conectar WebSocket:', error);
                connectionState.textContent = 'Estado: Error WebSocket ‚ùå';
                updateConnectionStatus(false, 'Error de conexi√≥n WebSocket');
            }
        }

        // Funci√≥n para mostrar notificaci√≥n
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 12px 16px;
                background: ${type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : '#4CAF50'};
                color: ${type === 'warning' ? '#000' : 'white'};
                border-radius: 6px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                max-width: 350px;
                word-wrap: break-word;
                font-size: 14px;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 4000);
        }

        // Inicializar
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('üöÄ Inicializando gestor de citas...');
            
            // Cargar datos primero
            await loadAppointmentsFromServer();
            
            // Configurar botones
            document.getElementById('btnRefresh').addEventListener('click', async () => {
                showNotification('Actualizando datos...', 'info');
                await loadAppointmentsFromServer();
            });
            
            document.getElementById('btnTestConnection').addEventListener('click', async () => {
                showNotification('Probando conexi√≥n...', 'info');
                const isConnected = await checkServerConnection();
                if (isConnected) {
                    showNotification('‚úÖ Conexi√≥n exitosa', 'info');
                } else {
                    showNotification('‚ùå Error de conexi√≥n', 'error');
                }
            });
            
            document.getElementById('btnAgregar').addEventListener('click', () => {
                showNotification('Use el bot de WhatsApp para agregar citas', 'info');
            });
            
            // Intentar WebSocket despu√©s de 2 segundos
            setTimeout(() => {
                connectWebSocket();
            }, 2000);
            
            // Configurar filtros
            document.getElementById('searchInput').addEventListener('input', () => {
                const searchText = document.getElementById('searchInput').value.toLowerCase();
                const filtered = allAppointments.filter(apt => 
                    (apt.patient_name || '').toLowerCase().includes(searchText) ||
                    (apt.patient_phone || '').includes(searchText)
                );
                renderAppointments(filtered);
            });
            
            document.getElementById('statusFilter').addEventListener('change', () => {
                const status = document.getElementById('statusFilter').value;
                const filtered = status === 'all' 
                    ? allAppointments 
                    : allAppointments.filter(apt => apt.status === status);
                renderAppointments(filtered);
            });
        });

        function addButtonListeners() {
            document.querySelectorAll('.confirm-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.getAttribute('data-id');
                    showNotification('Confirmaci√≥n enviada al servidor', 'info');
                    if (socket && socket.connected) {
                        socket.emit('confirmAppointment', id);
                    }
                });
            });
        }
    </script>
</LayoutLogin>

<style>
body {
    background: url('/src/assets/admin.jpg');
    background-size: cover;
    background-position: center;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    min-height: 100vh;
}

.container-2 {
    flex: 1;
    margin-top: 5%;
    margin-left: 200px;
    background: rgba(217, 220, 224, 0.95);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-right: 20px;
    backdrop-filter: blur(5px);
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.connection-status {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    font-size: 14px;
    border: 1px solid #dee2e6;
}

.filters-container {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
    flex-wrap: wrap;
    align-items: center;
}

.search-input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex: 1;
    min-width: 200px;
}

.filter-select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
}

.btn {
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    margin-right: 5px;
    transition: background-color 0.3s;
}

.btn-primary {
    background-color: #3d87d7;
    color: white;
}

.btn-primary:hover {
    background-color: #2a6fc7;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background-color: #5a6268;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #dc3545;
    margin-right: 8px;
    transition: background-color 0.3s;
}

.status-dot.connected {
    background-color: #28a745;
}

.table-excel {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background: white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.table-excel th,
.table-excel td {
    padding: 12px 15px;
    text-align: left;
    border: 1px solid #ddd;
}

.table-excel thead {
    background-color: #3d87d7;
    color: #ffffff;
}

.table-excel th {
    font-weight: 600;
}

.table-excel tbody tr:nth-of-type(even) {
    background-color: #f8f9fa;
}

.table-excel tbody tr:hover {
    background-color: #e9ecef;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-danger:hover {
    background-color: #c82333;
}

.btn-success {
    background-color: #28a745;
    color: white;
}

.btn-success:hover {
    background-color: #218838;
}

.btn-sm {
    padding: 5px 10px;
    font-size: 12px;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    display: inline-block;
    min-width: 80px;
    text-align: center;
}

.status-badge.pending {
    background-color: #ffc107;
    color: #212529;
}

.status-badge.confirmed {
    background-color: #28a745;
    color: white;
}

.status-badge.cancelled {
    background-color: #dc3545;
    color: white;
}

.actions-cell {
    min-width: 180px;
}

.no-actions {
    color: #6c757d;
    font-style: italic;
    font-size: 12px;
}

.new-appointment {
    animation: highlight 3s ease;
}

@keyframes highlight {
    0% { background-color: rgba(40, 167, 69, 0.5); }
    100% { background-color: transparent; }
}

/* Barra Lateral */
.sidebar {
    width: 200px;
    background-color: #333;
    color: white;
    padding: 1rem;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
}

.sidebar nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar nav ul li {
    margin-bottom: 10px;
}

.sidebar nav ul li a {
    color: white;
    text-decoration: none;
    display: block;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.sidebar nav ul li a:hover {
    background-color: #555;
}

/* Responsive */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
    
    .sidebar {
        width: 100%;
        height: auto;
        position: relative;
    }
    
    .container-2 {
        margin-left: 0;
        margin-right: 0;
    }
    
    .filters-container {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-input {
        min-width: auto;
    }
}
</style>