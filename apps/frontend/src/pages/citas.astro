---
import LayoutLogin from "../layouts/LayoutLogin.astro";
---

<LayoutLogin>
    <div class="container">
        <aside class="sidebar">
            <nav>
                <ul>
                    <li><a href="/admin">Horarios</a></li>
                    <li><a href="/inventario">Inventario</a></li>
                    <li><a href="/citas">Citas</a></li>
                </ul>
            </nav>
        </aside>

        <div class="container-2">
            <h1>Gestor de Citas</h1>
            <div id="connectionStatus" class="connection-status">
                <span class="status-dot"></span>
                <span class="status-text">Conectando...</span>
            </div>
            
            <!-- Filtros y b√∫squeda -->
            <div class="filters-container">
                <input type="text" id="searchInput" placeholder="Buscar por nombre o tel√©fono..." class="search-input">
                <select id="statusFilter" class="filter-select">
                    <option value="all">Todos los estados</option>
                    <option value="pending">Pendiente</option>
                    <option value="confirmed">Confirmado</option>
                    <option value="cancelled">Cancelado</option>
                </select>
                <button id="btnRefresh" class="btn btn-secondary">Actualizar</button>
            </div>
            
            <table class="table-excel" id="tablaCitas">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nombre Cliente</th>
                        <th>Tel√©fono</th>
                        <th>Fecha y Hora</th>
                        <th>Servicio</th>
                        <th>Precio</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="citasBody">
                    <!-- Las citas se cargar√°n din√°micamente -->
                </tbody>
            </table>
            <button id="btnAgregar" class="btn btn-primary">Agregar Nueva Cita</button>
        </div>
    </div>

     <!-- Cargar socket.io-client desde CDN -->
    <script src="https://cdn.socket.io/4.7.4/socket.io.min.js"></script>

    <script>
        // üö® CORRECCI√ìN: Detectar autom√°ticamente el entorno
        const IS_DEVELOPMENT = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        const BOT_SERVER_URL = IS_DEVELOPMENT 
            ? 'http://localhost:10000'  // Desarrollo local
            : 'https://proyecto-bot-gbbo.onrender.com';  // Producci√≥n
            
        console.log('üåç Entorno:', IS_DEVELOPMENT ? 'Desarrollo' : 'Producci√≥n');
        console.log('üîó Conectando a:', BOT_SERVER_URL);
        
        let socket = null;
        let connectionStatus = document.getElementById('connectionStatus');
        let statusDot = connectionStatus.querySelector('.status-dot');
        let statusText = connectionStatus.querySelector('.status-text');
        
        // Almacenamiento de todas las citas
        let allAppointments = [];
        
        // Funci√≥n para verificar la conexi√≥n al servidor
        async function checkServerConnection() {
            try {
                const response = await fetch(`${BOT_SERVER_URL}/health`, {
                    method: 'GET',
                    mode: 'cors'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('‚úÖ Servidor disponible:', data);
                    return true;
                }
                return false;
            } catch (error) {
                console.error('‚ùå Servidor no disponible:', error);
                return false;
            }
        }

        // Cargar citas desde localStorage al iniciar
        function loadAppointmentsFromStorage() {
            try {
                const storedAppointments = localStorage.getItem('appointments');
                if (storedAppointments) {
                    allAppointments = JSON.parse(storedAppointments);
                    console.log(`üìã Cargadas ${allAppointments.length} citas desde almacenamiento local`);
                    renderAppointments(allAppointments);
                }
            } catch (error) {
                console.error('Error al cargar citas desde almacenamiento:', error);
            }
        }
        
        // Guardar citas en localStorage
        function saveAppointmentsToStorage() {
            try {
                localStorage.setItem('appointments', JSON.stringify(allAppointments));
            } catch (error) {
                console.error('Error al guardar citas en almacenamiento:', error);
            }
        }

        // Funci√≥n para cargar citas desde el servidor via HTTP
        async function loadAppointmentsFromServer() {
            try {
                console.log('üì° Intentando cargar citas desde el servidor...');
                
                // Primero verificar si el servidor est√° disponible
                const isServerAvailable = await checkServerConnection();
                
                if (!isServerAvailable) {
                    console.log('‚ö†Ô∏è  Servidor no disponible, usando datos locales');
                    loadAppointmentsFromStorage();
                    return;
                }
                
                // Intentar cargar citas via HTTP como fallback
                try {
                    const response = await fetch(`${BOT_SERVER_URL}/api/appointments`, {
                        method: 'GET',
                        mode: 'cors'
                    });
                    
                    if (response.ok) {
                        const appointments = await response.json();
                        allAppointments = appointments;
                        renderAppointments(allAppointments);
                        saveAppointmentsToStorage();
                        console.log('‚úÖ Citas cargadas desde servidor HTTP');
                    } else {
                        throw new Error('HTTP error: ' + response.status);
                    }
                } catch (httpError) {
                    console.log('‚ö†Ô∏è  Fallback HTTP no disponible, usando datos locales');
                    loadAppointmentsFromStorage();
                }
                
            } catch (error) {
                console.error('‚ùå Error al cargar citas del servidor:', error);
                loadAppointmentsFromStorage();
            }
        }

        // Funci√≥n para formatear fecha
        function formatDateTime(dateTimeStr) {
            if (!dateTimeStr) return 'N/A';
            return dateTimeStr;
        }

        // Funci√≥n para actualizar el estado de conexi√≥n
        function updateConnectionStatus(connected, message) {
            if (connected) {
                statusDot.classList.add('connected');
                statusText.textContent = message || 'Conectado en tiempo real';
            } else {
                statusDot.classList.remove('connected');
                statusText.textContent = message || 'Desconectado';
            }
        }

        // Funci√≥n para renderizar todas las citas en la tabla
        function renderAppointments(appointments) {
            const tbody = document.getElementById('citasBody');
            tbody.innerHTML = '';
            
            if (appointments.length === 0) {
                tbody.innerHTML = '<tr><td colspan="8" style="text-align: center;">No hay citas registradas</td></tr>';
                return;
            }
            
            appointments.forEach(appointment => {
                const row = document.createElement('tr');
                const isConfirmed = appointment.status === 'confirmed';
                const isCancelled = appointment.status === 'cancelled';
                
                row.innerHTML = `
                    <td>${appointment.id || 'N/A'}</td>
                    <td>${appointment.patient_name || appointment.nombre || 'N/A'}</td>
                    <td>${appointment.patient_phone || appointment.telefono || 'N/A'}</td>
                    <td>${formatDateTime(appointment.appointment_date || appointment.fecha)}</td>
                    <td>${appointment.service_type || appointment.servicio || 'N/A'}</td>
                    <td>${appointment.service_price || appointment.precio || 'N/A'}</td>
                    <td>
                        <span class="status-badge ${appointment.status || 'pending'}">
                            ${isConfirmed ? 'Confirmado' : 
                              isCancelled ? 'Cancelado' : 'Pendiente'}
                        </span>
                    </td>
                    <td class="actions-cell">
                        ${!isConfirmed && !isCancelled ? 
                            `<button class="btn btn-success btn-sm confirm-btn" data-id="${appointment.id}">Confirmar</button>` : 
                            ''}
                        ${!isCancelled && !isConfirmed ? 
                            `<button class="btn btn-danger btn-sm cancel-btn" data-id="${appointment.id}">Cancelar</button>` : 
                            ''}
                        ${isConfirmed || isCancelled ? 
                            `<span class="no-actions">No hay acciones disponibles</span>` : 
                            ''}
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Agregar event listeners a los botones despu√©s de renderizar
            addButtonListeners();
        }

        // Funci√≥n para agregar event listeners a los botones
        function addButtonListeners() {
            // Botones de confirmar
            document.querySelectorAll('.confirm-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const appointmentId = this.getAttribute('data-id');
                    confirmAppointment(appointmentId);
                });
            });
            
            // Botones de cancelar
            document.querySelectorAll('.cancel-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const appointmentId = this.getAttribute('data-id');
                    cancelAppointment(appointmentId);
                });
            });
        }

        // Funci√≥n para agregar o actualizar una cita
        function upsertAppointment(appointment) {
            const index = allAppointments.findIndex(a => a.id === appointment.id);
            
            if (index === -1) {
                // Nueva cita
                allAppointments.unshift(appointment);
            } else {
                // Actualizar cita existente
                allAppointments[index] = { ...allAppointments[index], ...appointment };
            }
            
            renderAppointments(allAppointments);
            saveAppointmentsToStorage();
        }

        // Funci√≥n para conectar al servidor de WebSockets
        function connectWebSocket() {
            try {
                if (typeof io !== 'undefined') {
                    console.log('üîó Conectando a WebSocket:', BOT_SERVER_URL);
                    
                    socket = io(BOT_SERVER_URL, {
                        transports: ['websocket', 'polling'],
                        timeout: 10000,
                        reconnection: true,
                        reconnectionAttempts: 10,
                        reconnectionDelay: 1000
                    });
                    
                    socket.on('connect', () => {
                        console.log('‚úÖ Conectado al servidor de WebSockets');
                        updateConnectionStatus(true, 'Conectado en tiempo real');
                        
                        // Solicitar todas las citas al conectarse
                        socket.emit('getAllAppointments');
                    });
                    
                    // Evento para recibir todas las citas existentes
                    socket.on('allAppointments', (appointmentsData) => {
                        console.log('üìä Recibidas todas las citas:', appointmentsData.length);
                        allAppointments = appointmentsData;
                        renderAppointments(allAppointments);
                        saveAppointmentsToStorage();
                    });
                    
                    // Evento para recibir una nueva cita
                    socket.on('newAppointment', (appointmentData) => {
                        console.log('üÜï Nueva cita recibida:', appointmentData);
                        upsertAppointment(appointmentData);
                        showNotification(`Nueva cita de ${appointmentData.patient_name}`);
                    });
                    
                    // Evento para recibir confirmaci√≥n de cita
                    socket.on('appointmentConfirmed', (appointmentData) => {
                        console.log('‚úÖ Cita confirmada:', appointmentData);
                        
                        // Actualizar la cita en nuestra lista local
                        const index = allAppointments.findIndex(a => a.id === appointmentData.id);
                        if (index !== -1) {
                            allAppointments[index] = { ...allAppointments[index], ...appointmentData };
                            renderAppointments(allAppointments);
                            saveAppointmentsToStorage();
                        }
                        
                        showNotification(`Cita de ${appointmentData.patient_name} confirmada`);
                    });
                    
                    // Evento para recibir resultado de confirmaci√≥n
                    socket.on('confirmationResult', (result) => {
                        console.log('üìã Resultado de confirmaci√≥n:', result);
                        if (result.success) {
                            showNotification(`Cita ${result.appointmentId} confirmada exitosamente`);
                            
                            // Actualizar el estado de la cita localmente
                            const index = allAppointments.findIndex(a => a.id == result.appointmentId);
                            if (index !== -1) {
                                allAppointments[index].status = 'confirmed';
                                renderAppointments(allAppointments);
                                saveAppointmentsToStorage();
                            }
                        } else {
                            showNotification(`Error al confirmar cita: ${result.message}`);
                            
                            // Revertir el estado si fall√≥ la confirmaci√≥n
                            const index = allAppointments.findIndex(a => a.id == result.appointmentId);
                            if (index !== -1) {
                                allAppointments[index].status = 'pending';
                                renderAppointments(allAppointments);
                                saveAppointmentsToStorage();
                            }
                        }
                    });
                    
                    socket.on('disconnect', () => {
                        console.log('‚ùå Desconectado del servidor de WebSockets');
                        updateConnectionStatus(false, 'Desconectado - Intentando reconectar...');
                    });
                    
                    socket.on('connect_error', (error) => {
                        console.error('‚ùå Error de conexi√≥n:', error);
                        updateConnectionStatus(false, 'Error de conexi√≥n');
                    });
                    
                    socket.on('error', (error) => {
                        console.error('‚ùå Error de Socket.io:', error);
                    });
                } else {
                    console.error('‚ùå Socket.io no est√° disponible');
                    updateConnectionStatus(false, 'Error: Socket.io no cargado');
                }
            } catch (error) {
                console.error('‚ùå Error al inicializar WebSocket:', error);
                updateConnectionStatus(false, 'Error de conexi√≥n');
            }
        }

        // Funci√≥n para confirmar una cita
        function confirmAppointment(appointmentId) {
            if (socket && socket.connected) {
                console.log(`üì® Enviando confirmaci√≥n para cita ID: ${appointmentId}`);
                
                // Actualizar visualmente inmediatamente
                const index = allAppointments.findIndex(a => a.id == appointmentId);
                if (index !== -1) {
                    allAppointments[index].status = 'confirmed';
                    renderAppointments(allAppointments);
                }
                
                // Enviar confirmaci√≥n al servidor
                socket.emit('confirmAppointment', appointmentId);
            } else {
                showNotification('‚ùå Error: No hay conexi√≥n con el servidor');
                console.error('No se puede enviar confirmaci√≥n - Socket no conectado');
                
                // Revertir el cambio visual
                const index = allAppointments.findIndex(a => a.id == appointmentId);
                if (index !== -1) {
                    allAppointments[index].status = 'pending';
                    renderAppointments(allAppointments);
                }
            }
        }

        // Funci√≥n para cancelar una cita
        function cancelAppointment(appointmentId) {
            showNotification('‚ö†Ô∏è Funci√≥n de cancelaci√≥n no implementada a√∫n');
        }

        // Funci√≥n para mostrar notificaci√≥n
        function showNotification(message) {
            // Crear elemento de notificaci√≥n si no existe
            let notification = document.getElementById('notification');
            if (!notification) {
                notification = document.createElement('div');
                notification.id = 'notification';
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    background: #4CAF50;
                    color: white;
                    border-radius: 5px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                    z-index: 1000;
                    opacity: 0;
                    transition: opacity 0.3s;
                    max-width: 300px;
                    word-wrap: break-word;
                `;
                document.body.appendChild(notification);
            }
            
            // Cambiar color seg√∫n el tipo de mensaje
            if (message.includes('‚ùå') || message.includes('Error')) {
                notification.style.background = '#dc3545';
            } else if (message.includes('‚ö†Ô∏è')) {
                notification.style.background = '#ffc107';
                notification.style.color = '#000';
            } else {
                notification.style.background = '#4CAF50';
            }
            
            notification.textContent = message;
            notification.style.opacity = '1';
            
            setTimeout(() => {
                notification.style.opacity = '0';
            }, 3000);
        }

        // Funci√≥n para filtrar citas
        function filterAppointments() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            
            const filteredAppointments = allAppointments.filter(appointment => {
                const matchesSearch = 
                    (appointment.patient_name && appointment.patient_name.toLowerCase().includes(searchText)) ||
                    (appointment.nombre && appointment.nombre.toLowerCase().includes(searchText)) ||
                    (appointment.patient_phone && appointment.patient_phone.includes(searchText)) ||
                    (appointment.telefono && appointment.telefono.includes(searchText));
                
                const matchesStatus = statusFilter === 'all' || (appointment.status === statusFilter);
                
                return matchesSearch && matchesStatus;
            });
            
            renderAppointments(filteredAppointments);
        }

        // Inicializar cuando el DOM est√© listo
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('üöÄ Inicializando gestor de citas...');
            console.log('üìç URL del frontend:', window.location.hostname);
            console.log('üîó URL del bot:', BOT_SERVER_URL);
            
            // Cargar citas existentes desde el servidor o almacenamiento local
            await loadAppointmentsFromServer();
            
            // Conectar al WebSocket
            connectWebSocket();
            
            // Configurar botones
            document.getElementById('btnAgregar').addEventListener('click', () => {
                alert('Para agregar citas manualmente, necesitas implementar un formulario con conexi√≥n a tu backend');
            });
            
            document.getElementById('btnRefresh').addEventListener('click', async () => {
                console.log('üîÑ Actualizando citas...');
                showNotification('Actualizando citas...');
                
                // Recargar citas desde el servidor
                await loadAppointmentsFromServer();
                
                // Reconectar WebSocket si es necesario
                if (!socket || !socket.connected) {
                    connectWebSocket();
                } else {
                    // Solicitar citas actualizadas via WebSocket
                    socket.emit('getAllAppointments');
                }
            });
            
            // Configurar filtros
            document.getElementById('searchInput').addEventListener('input', filterAppointments);
            document.getElementById('statusFilter').addEventListener('change', filterAppointments);
            
            // Intentar reconexi√≥n cada 10 segundos si est√° desconectado
            setInterval(async () => {
                if (!socket || !socket.connected) {
                    console.log('üîÑ Intentando reconectar WebSocket...');
                    
                    // Verificar primero si el servidor est√° disponible
                    const isServerAvailable = await checkServerConnection();
                    if (isServerAvailable) {
                        connectWebSocket();
                    } else {
                        console.log('‚ùå Servidor no disponible, reintentando en 10 segundos...');
                    }
                }
            }, 10000);
        });
    </script>
</LayoutLogin>

<style>
body {
    background: url('/src/assets/admin.jpg');
    background-size: cover;
    background-position: center;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    min-height: 100vh;
}

.container-2 {
    flex: 1;
    margin-top: 5%;
    margin-left: 200px;
    background: rgba(217, 220, 224, 0.95);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-right: 20px;
    backdrop-filter: blur(5px);
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.connection-status {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    font-size: 14px;
    border: 1px solid #dee2e6;
}

.filters-container {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
    flex-wrap: wrap;
    align-items: center;
}

.search-input {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    flex: 1;
    min-width: 200px;
}

.filter-select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
}

.btn {
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    margin-right: 5px;
    transition: background-color 0.3s;
}

.btn-primary {
    background-color: #3d87d7;
    color: white;
}

.btn-primary:hover {
    background-color: #2a6fc7;
}

.btn-secondary {
    background-color: #6c757d;
    color: white;
}

.btn-secondary:hover {
    background-color: #5a6268;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #dc3545;
    margin-right: 8px;
    transition: background-color 0.3s;
}

.status-dot.connected {
    background-color: #28a745;
}

.table-excel {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
    background: white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.table-excel th,
.table-excel td {
    padding: 12px 15px;
    text-align: left;
    border: 1px solid #ddd;
}

.table-excel thead {
    background-color: #3d87d7;
    color: #ffffff;
}

.table-excel th {
    font-weight: 600;
}

.table-excel tbody tr:nth-of-type(even) {
    background-color: #f8f9fa;
}

.table-excel tbody tr:hover {
    background-color: #e9ecef;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-danger:hover {
    background-color: #c82333;
}

.btn-success {
    background-color: #28a745;
    color: white;
}

.btn-success:hover {
    background-color: #218838;
}

.btn-sm {
    padding: 5px 10px;
    font-size: 12px;
}

.status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    display: inline-block;
    min-width: 80px;
    text-align: center;
}

.status-badge.pending {
    background-color: #ffc107;
    color: #212529;
}

.status-badge.confirmed {
    background-color: #28a745;
    color: white;
}

.status-badge.cancelled {
    background-color: #dc3545;
    color: white;
}

.actions-cell {
    min-width: 180px;
}

.no-actions {
    color: #6c757d;
    font-style: italic;
    font-size: 12px;
}

.new-appointment {
    animation: highlight 3s ease;
}

@keyframes highlight {
    0% { background-color: rgba(40, 167, 69, 0.5); }
    100% { background-color: transparent; }
}

/* Barra Lateral */
.sidebar {
    width: 200px;
    background-color: #333;
    color: white;
    padding: 1rem;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
}

.sidebar nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar nav ul li {
    margin-bottom: 10px;
}

.sidebar nav ul li a {
    color: white;
    text-decoration: none;
    display: block;
    padding: 0.75rem 1rem;
    border-radius: 4px;
    transition: background-color 0.3s;
}

.sidebar nav ul li a:hover {
    background-color: #555;
}

/* Responsive */
@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
    
    .sidebar {
        width: 100%;
        height: auto;
        position: relative;
    }
    
    .container-2 {
        margin-left: 0;
        margin-right: 0;
    }
    
    .filters-container {
        flex-direction: column;
        align-items: stretch;
    }
    
    .search-input {
        min-width: auto;
    }
}
</style>