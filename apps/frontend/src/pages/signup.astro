---
import AuthUnprotected from "../features/auth/AuthUnprotected.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <div class="todo">
        <div class="container-form register">
        <div class="information">
            <div class="info-childs">
                <h2>Bienvenido nuevamente</h2>
                <p>Para unirte a nuestra comunidad por favor Inicia Sesión con tus datos</p>
                <input type="button" onclick="window.location.href='/login'" value="Inicia Sesión" id="sign-in">
            </div>
        </div>
    <main class="main-login">
        <section class="login-section contenedor">
            <h2 class="section-title">crear una cuenta</h2>
            <form id="signup-form" class="signup-form">
                <div class="form-group">
                    <i class="bx bx-user"></i>
                    <input type="text" id="name" name="name" class="name" placeholder="luis miguel jose perez" required>
                </div>
                <div class="form-group">
                    <i class='bx bx-envelope' ></i>
                    <input type="email" id="email" name="email" class="email" placeholder="ejemplo@gmail.com" required>
                </div>
                <div class="form-group">
                    <i class='bx bx-lock-alt' ></i>
                    <input type="password" autocomplete="off" id="password" class="password" name="password" placeholder="tu Contraseña" required>
                </div>
                <div class="form-group">
                    <i class='bx bx-lock-alt' ></i>
                    <input type="password" autocomplete="off" id="verify-password" class="verify-password" name="verify-password" placeholder="repita su Contraseña" required>
                </div>
                <div class="container-url">
                <button type="submit" class="submit-button" id="submit-button">Acceder</button>
                </div>
            </form>
        </section>
    </main>
    </div>
</Layout>

<style>

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'poppins', sans-serif;
}

 body {
        background: url('/src/assets/fondoLogin.jpg');
        background-size: cover;
        background-position: center;
        align-items: center;   /* Centra verticalmente */
        justify-content: center; /* Centra horizontalmente */
        min-height: 100vh;     /* Asegura que el body ocupe toda la altura de la pantalla */
    }

.todo{
    display: flex;
    justify-content: center;
    padding: 55px;
}
.form-group{
    display: flex;
    flex-direction: column;
    text-align: left;
    position: relative; /* Base para el posicionamiento absoluto del icono */
}

.form-group i {
    position: absolute; /* Posiciona el icono respecto al .form-group */
    left: 15px; /* Espacio desde la izquierda */
    top: 50%; /* Centra verticalmente */
    transform: translateY(-50%);
}

.container-form {
        display: flex;
        border-radius: 20px;
        box-shadow: 0 5px 7px rgba(0, 0, 0, .1);
        height: 500px;
        max-width: 900px;
        width: 100%; /* Ajusta el ancho al máximo posible */
        transition: all 1s ease;
        margin: 0 15px; /* Opcional: añade un pequeño margen a los lados para pantallas pequeñas */
    }

.main-login {
    display: flex;
    justify-content: center;
    width: 100%;
    border-bottom-right-radius: 20px;
    border-top-right-radius: 20px;
    backdrop-filter: blur(20px);
    border: solid 1px #9c9ccb59
}

.information {
        width: 40%;
        display: flex;
        align-items: center;
        text-align: center;
        background-color: #4a55c6;
        border-top-left-radius: 20px;
        border-bottom-left-radius: 20px;
    }

.info-childs {
  width: 100%;
  padding: 0 30px;
}

.info-childs h2 {
  font-size: 2.5rem;
  color: #000000;
}

.info-childs p {
  margin: 15px 0 ;
  color: #1f1f1f;
}

.info-childs input {
  background-color: #000000;
  outline: none;
  border-radius: 20px;
  padding: 10px 20px;
  color: #fff;
  cursor: pointer;
  transition: background-color .3s ease;
}

.info-childs input:hover {
  background-color: transparent;
  border: solid 2px #010101;
  color: #000000;
  box-shadow: 0 2px 5px rgba(0, 0, 0, .1);
}

.form-group{
        display: flex;
        flex-direction: column;
        text-align: left;
        position: relative; /* Base para el posicionamiento absoluto del icono */
    }


    .form-group i {
        position: absolute; /* Posiciona el icono respecto al .form-group */
        left: 15px; /* Espacio desde la izquierda */
        top: 50%; /* Centra verticalmente */
        transform: translateY(-50%);
    }

.login-section {
    background-color: var(--color-blanco);
    max-width: 550px; /* Un poco más estrecho que el de registro */
    width: 100%;
    text-align: center;
    padding: 50px;
    border-radius: 10px;
    height: 490px;
}

.login-section .section-title {
    margin-bottom: 20px;
    font-size: 2.2rem;
}

.login-form {
    display: grid;
    gap: 20px;
}

.submit-button {
    width: auto;
    padding: 12px 30px;
    font-size: 1.1rem;
    cursor: pointer;
    border-radius: 8px;
    border: solid 2px black;
    transition: background-color 0.3s ease, color 0.3s ease;
    background: #ce9bdbc9;
}

.submit-button:hover {
    background-color: #000000;
    color: white;
}

.email {
    height: 40px;
    border-radius: 6px;
    border: solid 1px black;
    background: transparent;
    width: 100%;
    padding: 12px 20px 12px 45px;
    box-sizing: border-box;
    outline: none;
}

.name {
    height: 40px;
    border-radius: 6px;
    border: solid 1px black;
    background: transparent;
    width: 100%;
    padding: 12px 20px 12px 45px;
    box-sizing: border-box;
    outline: none;
}

.email::placeholder {
  color: black; /* Cambia "red" por el color que desees */
}

.name::placeholder {
  color: black; /* Cambia "red" por el color que desees */
}

.password{
    height: 40px;
    border-radius: 6px;
    border: solid 1px black;
    background: transparent;
    width: 100%;
    padding: 12px 20px 12px 45px;
    box-sizing: border-box;
    outline: none;
}

.verify-password{
    height: 40px;
    border-radius: 6px;
    border: solid 1px black;
    background: transparent;
    width: 100%;
    padding: 12px 20px 12px 45px;
    box-sizing: border-box;
    outline: none;
}

.verify-password::placeholder {
  color: black; /* Cambia "red" por el color que desees */
}

.password::placeholder {
  color: black; /* Cambia "red" por el color que desees */
}

.enlace-password-ol a{
    text-decoration: none;
    font-weight: 600;
    display: flex;
}

.container-url {
    display: flex;
    flex-direction: column;
}

.enlace-password-ol p{
    display: flex;
}

.enlace-registro {
    font-size: 0.95rem;
}

.enlace-registro a {
    text-decoration: none;
    font-weight: 600;
}

/* Responsive para el formulario de login */
@media (max-width: 768px) {
    .main-login {
        min-height: calc(100vh - 180px); /* Ajusta si el header/footer mobile son más altos */
        padding: 20px 0;
    }

    .login-section {
        margin: 0 15px; /* Margen a los lados en pantallas pequeñas */
        padding: 30px 20px;
    }

    .login-section .section-title {
        font-size: 1.8rem;
        margin-bottom: 25px;
    }

    .login-form .btn-primario {
        padding: 10px 20px;
        font-size: 1rem;
    }

    .enlace-registro {
        font-size: 0.85rem;
    }
}
</style>

<script>
  // @ts-nocheck
  import { BACK_ENDPOINT } from "../config/endpoints";
import { createNotification } from "../features/notifications/notificiation";
  import ky from 'ky';

  // DOM Element Selection
  const form = document.querySelector('#signup-form');
  const emailInput = document.querySelector('#email');
  const passwordInput = document.querySelector('#password');
  const verifyPasswordInput = document.querySelector('#verify-password');
  const submitButton = document.querySelector('#submit-button');

  // Validation Regular Expressions
  const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
  // At least 1 letter, 1 number, 1 special character, and minimum 6 characters.
  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{6,}$/;

  // Validation State
  const validationState = {
    isEmailValid: false,
    isPasswordValid: false,
    doPasswordsMatch: false,
  };

  // Helper Function to Update Input Visuals
  function updateInputValidationUI(inputElement, isValid) {
    if (isValid) {
      // Use Tailwind classes for valid state: green border
      inputElement.classList.remove('border-red-500', 'dark:border-red-500');
      inputElement.classList.add('border-green-500', 'dark:border-green-500');
    } else {
      // Use Tailwind classes for invalid state: red border
      inputElement.classList.remove('border-green-500', 'dark:border-green-500');
      inputElement.classList.add('border-red-500', 'dark:border-red-500');
    }
    // Reset border color if the input is empty
    if (inputElement.value === '') {
      inputElement.classList.remove('border-red-500', 'dark:border-red-500', 'border-green-500', 'dark:border-green-500');
    }
  }

  // Master Validation Function
  function validateForm() {
    const { isEmailValid, isPasswordValid, doPasswordsMatch } = validationState;
    // Enable the button only if all validation checks pass
    submitButton.disabled = !isEmailValid || !isPasswordValid || !doPasswordsMatch;
  }

  // Event Listeners for Real-time Validation

  // 1. Email Validation
  emailInput.addEventListener('input', () => {
    const isValid = emailRegex.test(emailInput.value);
    validationState.isEmailValid = isValid;
    updateInputValidationUI(emailInput, isValid);
    validateForm();
  });

  // 2. Password Strength Validation
  passwordInput.addEventListener('input', () => {
    const isValid = passwordRegex.test(passwordInput.value);
    validationState.isPasswordValid = isValid;
    updateInputValidationUI(passwordInput, isValid);

    // Also, re-check the verify password field whenever the main password changes
    const passwordsMatch = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = passwordsMatch;
    updateInputValidationUI(verifyPasswordInput, passwordsMatch);

    validateForm();
  });

  // 3. Verify Password Match Validation
  verifyPasswordInput.addEventListener('input', () => {
    const isValid = passwordInput.value === verifyPasswordInput.value && verifyPasswordInput.value.length > 0;
    validationState.doPasswordsMatch = isValid;
    updateInputValidationUI(verifyPasswordInput, isValid);
    validateForm();
  });

  // Form Submission
  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const { isEmailValid, isPasswordValid, doPasswordsMatch } = validationState;
    if (!isEmailValid || !isPasswordValid || !doPasswordsMatch) return;


    try {
      await ky.post(`${BACK_ENDPOINT}/api/users`, {json: { email: emailInput.value, password: passwordInput.value}});
      // Reinciar todos los estados del formulario
      for (const key in validationState) {
        validationState[key] = false;
      }
      form.reset();
      [emailInput, passwordInput, verifyPasswordInput].forEach(input => {
        updateInputValidationUI(input);
      });
      validateForm();
      createNotification({ 
        title: 'Usuario creado!', 
        description: 'Se ha enviado un correo de verificacion a su bandeja de correo', 
        type: 'success'
      });
    } catch (error) {
      const errorData = await error?.response?.json();
      createNotification({ 
        title: 'Ups! Hubo un error', 
        description: errorData?.error ?? 'Sin mensaje', 
        type: 'error'
      });
    }  
  });
</script>


